/**
 * Api Documentation
 * Api Documentation
 *
 * OpenAPI spec version: 1.0
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { XHR } from "./XHR"
import { AgreementResponse } from "../model/AgreementResponse"

export class fhcEagreementApi {
  host: string
  headers: Array<XHR.Header>
  fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>

  constructor(
    host: string,
    headers: any,
    fetchImpl?: (input: RequestInfo, init?: RequestInit) => Promise<Response>
  ) {
    this.host = host
    this.headers = Object.keys(headers).map(k => new XHR.Header(k, headers[k]))
    this.fetchImpl = fetchImpl
  }

  setHeaders(h: Array<XHR.Header>) {
    this.headers = h
  }

  handleError(e: XHR.XHRError): never {
    throw e
  }

  /**
   *
   * @summary argueAgreement
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpQuality hcpQuality
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param messageEventSystem messageEventSystem
   * @param messageEventCode messageEventCode
   * @param insuranceRef insuranceRef
   * @param sctCode sctCode
   * @param sctDisplay sctDisplay
   * @param patientSsin patientSsin
   * @param patientIo patientIo
   * @param patientIoMembership patientIoMembership
   * @param orgNihii orgNihii
   * @param organizationType organizationType
   * @param annex1 annex1
   * @param annex2 annex2
   * @param agreementType agreementType
   * @param numberOfSessionForAnnex1 numberOfSessionForAnnex1
   * @param numberOfSessionForAnnex2 numberOfSessionForAnnex2
   */
  argueAgreementUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpQuality: string,
    hcpNihii: string,
    hcpName: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    messageEventSystem: string,
    messageEventCode: string,
    insuranceRef: string,
    sctCode: string,
    sctDisplay?: string,
    patientSsin?: string,
    patientIo?: string,
    patientIoMembership?: string,
    orgNihii?: string,
    organizationType?: string,
    annex1?: string,
    annex2?: string,
    agreementType?: string,
    numberOfSessionForAnnex1?: number,
    numberOfSessionForAnnex2?: number
  ): Promise<AgreementResponse> {
    let _body = null

    const _url =
      this.host +
      `/eagreement/argueAgreement` +
      "?ts=" +
      new Date().getTime() +
      (hcpQuality ? "&hcpQuality=" + encodeURIComponent(String(hcpQuality)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (messageEventSystem
        ? "&messageEventSystem=" + encodeURIComponent(String(messageEventSystem))
        : "") +
      (messageEventCode
        ? "&messageEventCode=" + encodeURIComponent(String(messageEventCode))
        : "") +
      (insuranceRef ? "&insuranceRef=" + encodeURIComponent(String(insuranceRef)) : "") +
      (sctCode ? "&sctCode=" + encodeURIComponent(String(sctCode)) : "") +
      (sctDisplay ? "&sctDisplay=" + encodeURIComponent(String(sctDisplay)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (patientIo ? "&patientIo=" + encodeURIComponent(String(patientIo)) : "") +
      (patientIoMembership
        ? "&patientIoMembership=" + encodeURIComponent(String(patientIoMembership))
        : "") +
      (orgNihii ? "&orgNihii=" + encodeURIComponent(String(orgNihii)) : "") +
      (organizationType
        ? "&organizationType=" + encodeURIComponent(String(organizationType))
        : "") +
      (annex1 ? "&annex1=" + encodeURIComponent(String(annex1)) : "") +
      (annex2 ? "&annex2=" + encodeURIComponent(String(annex2)) : "") +
      (agreementType ? "&agreementType=" + encodeURIComponent(String(agreementType)) : "") +
      (numberOfSessionForAnnex1
        ? "&numberOfSessionForAnnex1=" + encodeURIComponent(String(numberOfSessionForAnnex1))
        : "") +
      (numberOfSessionForAnnex2
        ? "&numberOfSessionForAnnex2=" + encodeURIComponent(String(numberOfSessionForAnnex2))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new AgreementResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary askAgreement
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpQuality hcpQuality
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param messageEventSystem messageEventSystem
   * @param messageEventCode messageEventCode
   * @param pathologyStartDate pathologyStartDate
   * @param pathologyCode pathologyCode
   * @param insuranceRef insuranceRef
   * @param sctCode sctCode
   * @param sctDisplay sctDisplay
   * @param patientSsin patientSsin
   * @param patientIo patientIo
   * @param patientIoMembership patientIoMembership
   * @param orgNihii orgNihii
   * @param organizationType organizationType
   * @param annex1 annex1
   * @param annex2 annex2
   * @param agreementStartDate agreementStartDate
   * @param agreementEndDate agreementEndDate
   * @param agreementType agreementType
   * @param numberOfSessionForAnnex1 numberOfSessionForAnnex1
   * @param numberOfSessionForAnnex2 numberOfSessionForAnnex2
   */
  askAgreementUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpQuality: string,
    hcpNihii: string,
    hcpName: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    messageEventSystem: string,
    messageEventCode: string,
    pathologyStartDate: number,
    pathologyCode: string,
    insuranceRef: string,
    sctCode: string,
    sctDisplay?: string,
    patientSsin?: string,
    patientIo?: string,
    patientIoMembership?: string,
    orgNihii?: string,
    organizationType?: string,
    annex1?: string,
    annex2?: string,
    agreementStartDate?: number,
    agreementEndDate?: number,
    agreementType?: string,
    numberOfSessionForAnnex1?: number,
    numberOfSessionForAnnex2?: number
  ): Promise<AgreementResponse> {
    let _body = null

    const _url =
      this.host +
      `/eagreement/askAgreement` +
      "?ts=" +
      new Date().getTime() +
      (hcpQuality ? "&hcpQuality=" + encodeURIComponent(String(hcpQuality)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (messageEventSystem
        ? "&messageEventSystem=" + encodeURIComponent(String(messageEventSystem))
        : "") +
      (messageEventCode
        ? "&messageEventCode=" + encodeURIComponent(String(messageEventCode))
        : "") +
      (pathologyStartDate
        ? "&pathologyStartDate=" + encodeURIComponent(String(pathologyStartDate))
        : "") +
      (pathologyCode ? "&pathologyCode=" + encodeURIComponent(String(pathologyCode)) : "") +
      (insuranceRef ? "&insuranceRef=" + encodeURIComponent(String(insuranceRef)) : "") +
      (sctCode ? "&sctCode=" + encodeURIComponent(String(sctCode)) : "") +
      (sctDisplay ? "&sctDisplay=" + encodeURIComponent(String(sctDisplay)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (patientIo ? "&patientIo=" + encodeURIComponent(String(patientIo)) : "") +
      (patientIoMembership
        ? "&patientIoMembership=" + encodeURIComponent(String(patientIoMembership))
        : "") +
      (orgNihii ? "&orgNihii=" + encodeURIComponent(String(orgNihii)) : "") +
      (organizationType
        ? "&organizationType=" + encodeURIComponent(String(organizationType))
        : "") +
      (annex1 ? "&annex1=" + encodeURIComponent(String(annex1)) : "") +
      (annex2 ? "&annex2=" + encodeURIComponent(String(annex2)) : "") +
      (agreementStartDate
        ? "&agreementStartDate=" + encodeURIComponent(String(agreementStartDate))
        : "") +
      (agreementEndDate
        ? "&agreementEndDate=" + encodeURIComponent(String(agreementEndDate))
        : "") +
      (agreementType ? "&agreementType=" + encodeURIComponent(String(agreementType)) : "") +
      (numberOfSessionForAnnex1
        ? "&numberOfSessionForAnnex1=" + encodeURIComponent(String(numberOfSessionForAnnex1))
        : "") +
      (numberOfSessionForAnnex2
        ? "&numberOfSessionForAnnex2=" + encodeURIComponent(String(numberOfSessionForAnnex2))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new AgreementResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary cancelAgreement
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpQuality hcpQuality
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param messageEventSystem messageEventSystem
   * @param messageEventCode messageEventCode
   * @param insuranceRef insuranceRef
   * @param patientSsin patientSsin
   * @param patientIo patientIo
   * @param patientIoMembership patientIoMembership
   * @param orgNihii orgNihii
   * @param organizationType organizationType
   * @param agreementType agreementType
   */
  cancelAgreementUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpQuality: string,
    hcpNihii: string,
    hcpName: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    messageEventSystem: string,
    messageEventCode: string,
    insuranceRef: string,
    patientSsin?: string,
    patientIo?: string,
    patientIoMembership?: string,
    orgNihii?: string,
    organizationType?: string,
    agreementType?: string
  ): Promise<AgreementResponse> {
    let _body = null

    const _url =
      this.host +
      `/eagreement/cancelAgreement` +
      "?ts=" +
      new Date().getTime() +
      (hcpQuality ? "&hcpQuality=" + encodeURIComponent(String(hcpQuality)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (messageEventSystem
        ? "&messageEventSystem=" + encodeURIComponent(String(messageEventSystem))
        : "") +
      (messageEventCode
        ? "&messageEventCode=" + encodeURIComponent(String(messageEventCode))
        : "") +
      (insuranceRef ? "&insuranceRef=" + encodeURIComponent(String(insuranceRef)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (patientIo ? "&patientIo=" + encodeURIComponent(String(patientIo)) : "") +
      (patientIoMembership
        ? "&patientIoMembership=" + encodeURIComponent(String(patientIoMembership))
        : "") +
      (orgNihii ? "&orgNihii=" + encodeURIComponent(String(orgNihii)) : "") +
      (organizationType
        ? "&organizationType=" + encodeURIComponent(String(organizationType))
        : "") +
      (agreementType ? "&agreementType=" + encodeURIComponent(String(agreementType)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new AgreementResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary completeAgreement
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpQuality hcpQuality
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param messageEventSystem messageEventSystem
   * @param messageEventCode messageEventCode
   * @param insuranceRef insuranceRef
   * @param sctCode sctCode
   * @param sctDisplay sctDisplay
   * @param patientSsin patientSsin
   * @param patientIo patientIo
   * @param patientIoMembership patientIoMembership
   * @param orgNihii orgNihii
   * @param organizationType organizationType
   * @param annex1 annex1
   * @param annex2 annex2
   * @param agreementType agreementType
   * @param numberOfSessionForAnnex1 numberOfSessionForAnnex1
   * @param numberOfSessionForAnnex2 numberOfSessionForAnnex2
   */
  completeAgreementUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpQuality: string,
    hcpNihii: string,
    hcpName: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    messageEventSystem: string,
    messageEventCode: string,
    insuranceRef: string,
    sctCode: string,
    sctDisplay?: string,
    patientSsin?: string,
    patientIo?: string,
    patientIoMembership?: string,
    orgNihii?: string,
    organizationType?: string,
    annex1?: string,
    annex2?: string,
    agreementType?: string,
    numberOfSessionForAnnex1?: number,
    numberOfSessionForAnnex2?: number
  ): Promise<AgreementResponse> {
    let _body = null

    const _url =
      this.host +
      `/eagreement/completeAgreement` +
      "?ts=" +
      new Date().getTime() +
      (hcpQuality ? "&hcpQuality=" + encodeURIComponent(String(hcpQuality)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (messageEventSystem
        ? "&messageEventSystem=" + encodeURIComponent(String(messageEventSystem))
        : "") +
      (messageEventCode
        ? "&messageEventCode=" + encodeURIComponent(String(messageEventCode))
        : "") +
      (insuranceRef ? "&insuranceRef=" + encodeURIComponent(String(insuranceRef)) : "") +
      (sctCode ? "&sctCode=" + encodeURIComponent(String(sctCode)) : "") +
      (sctDisplay ? "&sctDisplay=" + encodeURIComponent(String(sctDisplay)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (patientIo ? "&patientIo=" + encodeURIComponent(String(patientIo)) : "") +
      (patientIoMembership
        ? "&patientIoMembership=" + encodeURIComponent(String(patientIoMembership))
        : "") +
      (orgNihii ? "&orgNihii=" + encodeURIComponent(String(orgNihii)) : "") +
      (organizationType
        ? "&organizationType=" + encodeURIComponent(String(organizationType))
        : "") +
      (annex1 ? "&annex1=" + encodeURIComponent(String(annex1)) : "") +
      (annex2 ? "&annex2=" + encodeURIComponent(String(annex2)) : "") +
      (agreementType ? "&agreementType=" + encodeURIComponent(String(agreementType)) : "") +
      (numberOfSessionForAnnex1
        ? "&numberOfSessionForAnnex1=" + encodeURIComponent(String(numberOfSessionForAnnex1))
        : "") +
      (numberOfSessionForAnnex2
        ? "&numberOfSessionForAnnex2=" + encodeURIComponent(String(numberOfSessionForAnnex2))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new AgreementResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary consultList
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpQuality hcpQuality
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param messageEventSystem messageEventSystem
   * @param messageEventCode messageEventCode
   * @param insuranceRef insuranceRef
   * @param subTypeCode subTypeCode
   * @param patientSsin patientSsin
   * @param patientIo patientIo
   * @param patientIoMembership patientIoMembership
   * @param orgNihii orgNihii
   * @param organizationType organizationType
   * @param agreementStartDate agreementStartDate
   * @param agreementEndDate agreementEndDate
   * @param agreementType agreementType
   */
  consultListUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpQuality: string,
    hcpNihii: string,
    hcpName: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    messageEventSystem: string,
    messageEventCode: string,
    insuranceRef: string,
    subTypeCode: string,
    patientSsin?: string,
    patientIo?: string,
    patientIoMembership?: string,
    orgNihii?: string,
    organizationType?: string,
    agreementStartDate?: number,
    agreementEndDate?: number,
    agreementType?: string
  ): Promise<AgreementResponse> {
    let _body = null

    const _url =
      this.host +
      `/eagreement/consultList` +
      "?ts=" +
      new Date().getTime() +
      (hcpQuality ? "&hcpQuality=" + encodeURIComponent(String(hcpQuality)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (messageEventSystem
        ? "&messageEventSystem=" + encodeURIComponent(String(messageEventSystem))
        : "") +
      (messageEventCode
        ? "&messageEventCode=" + encodeURIComponent(String(messageEventCode))
        : "") +
      (insuranceRef ? "&insuranceRef=" + encodeURIComponent(String(insuranceRef)) : "") +
      (subTypeCode ? "&subTypeCode=" + encodeURIComponent(String(subTypeCode)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (patientIo ? "&patientIo=" + encodeURIComponent(String(patientIo)) : "") +
      (patientIoMembership
        ? "&patientIoMembership=" + encodeURIComponent(String(patientIoMembership))
        : "") +
      (orgNihii ? "&orgNihii=" + encodeURIComponent(String(orgNihii)) : "") +
      (organizationType
        ? "&organizationType=" + encodeURIComponent(String(organizationType))
        : "") +
      (agreementStartDate
        ? "&agreementStartDate=" + encodeURIComponent(String(agreementStartDate))
        : "") +
      (agreementEndDate
        ? "&agreementEndDate=" + encodeURIComponent(String(agreementEndDate))
        : "") +
      (agreementType ? "&agreementType=" + encodeURIComponent(String(agreementType)) : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new AgreementResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }

  /**
   *
   * @summary extendAgreement
   * @param xFHCKeystoreId X-FHC-keystoreId
   * @param xFHCTokenId X-FHC-tokenId
   * @param xFHCPassPhrase X-FHC-passPhrase
   * @param hcpQuality hcpQuality
   * @param hcpNihii hcpNihii
   * @param hcpName hcpName
   * @param hcpSsin hcpSsin
   * @param hcpFirstName hcpFirstName
   * @param hcpLastName hcpLastName
   * @param patientFirstName patientFirstName
   * @param patientLastName patientLastName
   * @param patientGender patientGender
   * @param messageEventSystem messageEventSystem
   * @param messageEventCode messageEventCode
   * @param pathologyStartDate pathologyStartDate
   * @param pathologyCode pathologyCode
   * @param insuranceRef insuranceRef
   * @param sctCode sctCode
   * @param sctDisplay sctDisplay
   * @param patientSsin patientSsin
   * @param patientIo patientIo
   * @param patientIoMembership patientIoMembership
   * @param orgNihii orgNihii
   * @param organizationType organizationType
   * @param annex1 annex1
   * @param annex2 annex2
   * @param agreementStartDate agreementStartDate
   * @param agreementEndDate agreementEndDate
   * @param agreementType agreementType
   * @param numberOfSessionForAnnex1 numberOfSessionForAnnex1
   * @param numberOfSessionForAnnex2 numberOfSessionForAnnex2
   */
  extendAgreementUsingPOST(
    xFHCKeystoreId: string,
    xFHCTokenId: string,
    xFHCPassPhrase: string,
    hcpQuality: string,
    hcpNihii: string,
    hcpName: string,
    hcpSsin: string,
    hcpFirstName: string,
    hcpLastName: string,
    patientFirstName: string,
    patientLastName: string,
    patientGender: string,
    messageEventSystem: string,
    messageEventCode: string,
    pathologyStartDate: number,
    pathologyCode: string,
    insuranceRef: string,
    sctCode: string,
    sctDisplay?: string,
    patientSsin?: string,
    patientIo?: string,
    patientIoMembership?: string,
    orgNihii?: string,
    organizationType?: string,
    annex1?: string,
    annex2?: string,
    agreementStartDate?: number,
    agreementEndDate?: number,
    agreementType?: string,
    numberOfSessionForAnnex1?: number,
    numberOfSessionForAnnex2?: number
  ): Promise<AgreementResponse> {
    let _body = null

    const _url =
      this.host +
      `/eagreement/extendAgreement` +
      "?ts=" +
      new Date().getTime() +
      (hcpQuality ? "&hcpQuality=" + encodeURIComponent(String(hcpQuality)) : "") +
      (hcpNihii ? "&hcpNihii=" + encodeURIComponent(String(hcpNihii)) : "") +
      (hcpName ? "&hcpName=" + encodeURIComponent(String(hcpName)) : "") +
      (hcpSsin ? "&hcpSsin=" + encodeURIComponent(String(hcpSsin)) : "") +
      (hcpFirstName ? "&hcpFirstName=" + encodeURIComponent(String(hcpFirstName)) : "") +
      (hcpLastName ? "&hcpLastName=" + encodeURIComponent(String(hcpLastName)) : "") +
      (patientFirstName
        ? "&patientFirstName=" + encodeURIComponent(String(patientFirstName))
        : "") +
      (patientLastName ? "&patientLastName=" + encodeURIComponent(String(patientLastName)) : "") +
      (patientGender ? "&patientGender=" + encodeURIComponent(String(patientGender)) : "") +
      (messageEventSystem
        ? "&messageEventSystem=" + encodeURIComponent(String(messageEventSystem))
        : "") +
      (messageEventCode
        ? "&messageEventCode=" + encodeURIComponent(String(messageEventCode))
        : "") +
      (pathologyStartDate
        ? "&pathologyStartDate=" + encodeURIComponent(String(pathologyStartDate))
        : "") +
      (pathologyCode ? "&pathologyCode=" + encodeURIComponent(String(pathologyCode)) : "") +
      (insuranceRef ? "&insuranceRef=" + encodeURIComponent(String(insuranceRef)) : "") +
      (sctCode ? "&sctCode=" + encodeURIComponent(String(sctCode)) : "") +
      (sctDisplay ? "&sctDisplay=" + encodeURIComponent(String(sctDisplay)) : "") +
      (patientSsin ? "&patientSsin=" + encodeURIComponent(String(patientSsin)) : "") +
      (patientIo ? "&patientIo=" + encodeURIComponent(String(patientIo)) : "") +
      (patientIoMembership
        ? "&patientIoMembership=" + encodeURIComponent(String(patientIoMembership))
        : "") +
      (orgNihii ? "&orgNihii=" + encodeURIComponent(String(orgNihii)) : "") +
      (organizationType
        ? "&organizationType=" + encodeURIComponent(String(organizationType))
        : "") +
      (annex1 ? "&annex1=" + encodeURIComponent(String(annex1)) : "") +
      (annex2 ? "&annex2=" + encodeURIComponent(String(annex2)) : "") +
      (agreementStartDate
        ? "&agreementStartDate=" + encodeURIComponent(String(agreementStartDate))
        : "") +
      (agreementEndDate
        ? "&agreementEndDate=" + encodeURIComponent(String(agreementEndDate))
        : "") +
      (agreementType ? "&agreementType=" + encodeURIComponent(String(agreementType)) : "") +
      (numberOfSessionForAnnex1
        ? "&numberOfSessionForAnnex1=" + encodeURIComponent(String(numberOfSessionForAnnex1))
        : "") +
      (numberOfSessionForAnnex2
        ? "&numberOfSessionForAnnex2=" + encodeURIComponent(String(numberOfSessionForAnnex2))
        : "")
    let headers = this.headers
    xFHCKeystoreId && (headers = headers.concat(new XHR.Header("X-FHC-keystoreId", xFHCKeystoreId)))
    xFHCTokenId && (headers = headers.concat(new XHR.Header("X-FHC-tokenId", xFHCTokenId)))
    xFHCPassPhrase && (headers = headers.concat(new XHR.Header("X-FHC-passPhrase", xFHCPassPhrase)))
    return XHR.sendCommand("POST", _url, headers, _body, this.fetchImpl)
      .then(doc => new AgreementResponse(doc.body as JSON))
      .catch(err => this.handleError(err))
  }
}
